name: Check Deployment (manually)

on:
  workflow_dispatch:
    inputs:
    
      environment:
        description: 'Environment to check'
        type: environment
        default: 'development'
        required: true

jobs:

  # note: duplicate deploy tasks per environment (else unable to access environment secrets)
  deploy_dev:
    
    if: ${{ inputs.environment == 'development' }}
    name: deploy to server (dev)
    runs-on: ubuntu-latest
    environment:
      name: development
     
    steps:

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/dev.key
          chmod 600 ~/.ssh/dev.key
          cat >>~/.ssh/config <<END
          Host dev
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/dev.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_KEY: ${{ secrets.SSH_PRIV_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
      
      - name: Show repo & git status
        run: |
          ssh dev 'cd ${{ vars.REPO_CLONE_PATH }} && \
          echo "*** Validate repository" && \
          git remote get-url origin && git rev-parse --abbrev-ref HEAD && git rev-parse --short HEAD && \
          echo "*** git status" && \
          git status'

  # note: duplicate deploy tasks per environment (else unable to access environment secrets)
  deploy_prod:
    
    if: ${{ inputs.environment == 'production' }}
    name: deploy to server (prd)
    runs-on: ubuntu-latest
    environment:
      name: production
     
    steps:
      - name: Set up SSH key        
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIV_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p 22 ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
  
      - name: Install sshpass
        run: sudo apt-get install sshpass
        
      - name: Stop Docker containers
        run: |
          sshpass ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} bash <<'ENDSSH'
          cd ${{ vars.REPO_CLONE_PATH }}
          sudo make stop
          ENDSSH
          
      - name: Fetch sources & submodules
        run: |
          sshpass ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} bash <<'ENDSSH'
          cd ${{ vars.REPO_CLONE_PATH }}
          git checkout -q ${{ inputs.branch }} && git pull
          sudo make fetch-modules
          cd ${{ vars.REPO_CLONE_PATH }}/backend/apps/ifc_validation/checks/ifc_gherkin_rules && git checkout -q ${{ inputs.branch }} && git pull
          cd ./ifc_validation_models && git checkout -q ${{ inputs.branch }} && git pull
          cd ${{ vars.REPO_CLONE_PATH }}/backend/apps/ifc_validation/checks/step_file_parser && git checkout -q master && git pull
          cd ${{ vars.REPO_CLONE_PATH }}/backend/apps/ifc_validation_models && git checkout -q ${{ inputs.branch }} && git pull
          cd ${{ vars.REPO_CLONE_PATH }}
          ./check-submodules.sh
          ENDSSH
      
      - name: Show repo & git status
        run: |
          sshpass ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} bash <<'ENDSSH'
          cd ${{ vars.REPO_CLONE_PATH }}
          echo "*** Validate repository"
          git remote get-url origin && git rev-parse --abbrev-ref HEAD && git rev-parse --short HEAD
          echo "*** git status"
          git status
          ENDSSH

      - name: Set VERSION
        run: |
          sshpass ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} bash <<'ENDSSH'
          cd ${{ vars.REPO_CLONE_PATH }}
          COMMIT_HASH=$(git rev-parse --short HEAD)
          VERSION="${{ vars.VERSION }}"
          echo "Set VERSION to ${VERSION}"
          echo "Commit hash ${COMMIT_HASH}"
          echo "${VERSION}" > .VERSION          
          ENDSSH
          
      - name: Build Docker images
        run: |
          sshpass ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} bash <<'ENDSSH'
          cd ${{ vars.REPO_CLONE_PATH }}
          sudo make rebuild
          ENDSSH
          
      - name: Start Docker containers
        run: |
          sshpass ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} bash <<'ENDSSH'
          cd ${{ vars.REPO_CLONE_PATH }}
          sudo docker compose -f ${{ vars.DOCKER_COMPOSE_FILE }} --env-file ${{ vars.ENV_FILE }} up -d
          ENDSSH
