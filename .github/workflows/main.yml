name: CI/CD

concurrency: 
  group: development
  cancel-in-progress: true

on:
  workflow_dispatch:

jobs:

  build_frontend:

    name: build frontend
    runs-on: ubuntu-latest
    environment:
      name: development
      
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
                
      - name: Install npm packages
        run: |
          cd frontend
          npm install

      - name: Build & bundle
        run: |
          cd frontend          
          unset CI # ignore React warnings
          npm run build

  build_backend:

    name: build backend
    runs-on: ubuntu-latest
    environment:
      name: development

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Create venv
        run: |
          cd backend
          make venv

      - name: Install packages
        run: |
          cd backend
          make install
          pip install ifcopenshell # TEMP workaround

      - name: Check Django config
        run: |
          cd backend
          source .dev/bin/activate
          python3 manage.py check
          
      - name: Run Django migrations
        run: |
          cd backend
          source .dev/bin/activate
          python3 manage.py makemigrations
          python3 manage.py migrate
        
  deploy:

    name: deploy to server 
    runs-on: ubuntu-latest
    needs: [build_frontend, build_backend]
    environment: 
      name: development
      
    steps:
      - name: Set up SSH key
        run: |
          env
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIV_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p 22 ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
  
      - name: Install sshpass
        run: sudo apt-get install sshpass
        
      - name: Stop Docker containers
        run: |
          sshpass ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} bash <<'ENDSSH'
          cd ${{ vars.PATH }}
          sudo make stop
          ENDSSH

      - name: Check submodules
        run: |
          sshpass ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} bash <<'ENDSSH'
          cd ${{ vars.PATH }}
          ./check-submodules.sh
          ENDSSH

      - name: Build Docker images
        run: |
          sshpass ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} bash <<'ENDSSH'
          cd ${{ vars.PATH }}
          sudo make build
          ENDSSH

      - name: Start Docker containers
        run: |
          sshpass ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} bash <<'ENDSSH'
          cd ${{ vars.PATH }}
          sudo docker compose -f ${{ vars.DOCKER_COMPOSE_FILE }} --env-file ${{ vars.ENV_FILE }} up -d
          ENDSSH
